{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\14252\\\\Desktop\\\\again2\\\\buttons\\\\widgets\\\\src\\\\Components\\\\Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = ({\n  options,\n  selected,\n  onSelectedChange,\n  label\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const onBodyClick = event => {\n      if (ref.current.contains(event.target)) {\n        return;\n      }\n\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true\n      });\n    };\n  }, []);\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => {\n        onSelectedChange(option);\n      },\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  });\n  console.log(ref.current);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          setOpen(!open);\n        },\n        className: `ui selection dropdown ${open ? \"visible active\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `menu ${open ? \"visible transition\" : \"\"}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = Dropdown;\nexport default Dropdown; // useEffect(() => {\n//   const onBodyClick = (event) => {\n//     if (ref.current.contains(event.target)) {\n//       return;\n//     }\n//     setOpen(false);\n//   };\n//   document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n//   return () => {\n//     document.body.removeEventListener(\"click\", onBodyClick, {\n//       capture: true,\n//     });\n//   };\n// }, []);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["C:/Users/14252/Desktop/again2/buttons/widgets/src/Components/Dropdown.js"],"names":["React","useEffect","useRef","useState","Dropdown","options","selected","onSelectedChange","label","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","renderedOptions","map","option","value","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,gBAArB;AAAuCC,EAAAA;AAAvC,CAAD,KAAoD;AAAA;;AACnE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMQ,GAAG,GAAGT,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,WAAW,GAAIC,KAAD,IAAW;AAC7B,UAAIF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAJ,EAAwC;AACtC;AACD;;AACDN,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KALD;;AAMAO,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCP,WAAxC,EAAqD;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAArD;AAEA,WAAO,MAAM;AACXH,MAAAA,QAAQ,CAACC,IAAT,CAAcG,mBAAd,CAAkC,OAAlC,EAA2CT,WAA3C,EAAwD;AACtDQ,QAAAA,OAAO,EAAE;AAD6C,OAAxD;AAGD,KAJD;AAKD,GAdQ,EAcN,EAdM,CAAT;AAgBA,QAAME,eAAe,GAAGjB,OAAO,CAACkB,GAAR,CAAaC,MAAD,IAAY;AAC9C,QAAIA,MAAM,CAACC,KAAP,KAAiBnB,QAAQ,CAACmB,KAA9B,EAAqC;AACnC,aAAO,IAAP;AACD;;AAED,wBACE;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,OAAO,EAAE,MAAM;AACblB,QAAAA,gBAAgB,CAACiB,MAAD,CAAhB;AACD,OALH;AAAA,gBAMGA,MAAM,CAAChB;AANV,OACOgB,MAAM,CAACC,KADd;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAfuB,CAAxB;AAgBAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAG,CAACG,OAAhB;AACA,sBACE;AAAK,IAAA,GAAG,EAAEH,GAAV;AAAe,IAAA,SAAS,EAAC,SAAzB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,kBAA0BH;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,OAAO,EAAE,MAAM;AACbE,UAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,SAHH;AAIE,QAAA,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAsB,EAAG,EAJnE;AAAA,gCAKE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBAAuBH,QAAQ,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAK,UAAA,SAAS,EAAG,QAAOC,IAAI,GAAG,oBAAH,GAA0B,EAAG,EAAzD;AAAA,oBACGa;AADH;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAvDD;;GAAMlB,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst Dropdown = ({ options, selected, onSelectedChange, label }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    const onBodyClick = (event) => {\r\n      if (ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n      setOpen(false);\r\n    };\r\n    document.body.addEventListener(\"click\", onBodyClick, { capture: true });\r\n\r\n    return () => {\r\n      document.body.removeEventListener(\"click\", onBodyClick, {\r\n        capture: true,\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  const renderedOptions = options.map((option) => {\r\n    if (option.value === selected.value) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        key={option.value}\r\n        className='item'\r\n        onClick={() => {\r\n          onSelectedChange(option);\r\n        }}>\r\n        {option.label}\r\n      </div>\r\n    );\r\n  });\r\n  console.log(ref.current);\r\n  return (\r\n    <div ref={ref} className='ui form'>\r\n      <div className='field'>\r\n        <label className='label'>{label}</label>\r\n        <div\r\n          onClick={() => {\r\n            setOpen(!open);\r\n          }}\r\n          className={`ui selection dropdown ${open ? \"visible active\" : \"\"}`}>\r\n          <i className='dropdown icon'></i>\r\n          <div className='text'>{selected.label}</div>\r\n          <div className={`menu ${open ? \"visible transition\" : \"\"}`}>\r\n            {renderedOptions}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n\r\n// useEffect(() => {\r\n//   const onBodyClick = (event) => {\r\n//     if (ref.current.contains(event.target)) {\r\n//       return;\r\n//     }\r\n//     setOpen(false);\r\n//   };\r\n//   document.body.addEventListener(\"click\", onBodyClick, { capture: true });\r\n\r\n//   return () => {\r\n//     document.body.removeEventListener(\"click\", onBodyClick, {\r\n//       capture: true,\r\n//     });\r\n//   };\r\n// }, []);\r\n"]},"metadata":{},"sourceType":"module"}