{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\14252\\\\Desktop\\\\again2\\\\buttons\\\\widgets\\\\src\\\\Components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { applyMiddleware } from \"redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = () => {\n  _s();\n\n  const [term, setTerm] = useState(\"\");\n  const [results, setResults] = useState(\"\");\n  useEffect(() => {\n    const searchWiki = async () => {\n      await axios.get(\"en.wikipedia.org/w/api.php?\");\n    };\n\n    search(); // you cannot use axios async/await on the first arg in a useEffect fxn. so helper fxn are the work around.\n    // (async () => {\n    //      await axios.get(term);\n    //   })();\n    // this is the same as the helper fxn about the extra parens is essentially calls the fxn itself, so you dont have to define it and then call it.\n  }, [term]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter Search Term\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: term,\n          onChange: e => setTerm(e.target.value),\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"iAdXY75sKbBhLcenffPvTqREOkk=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/14252/Desktop/again2/buttons/widgets/src/Components/Search.js"],"names":["React","useEffect","useState","axios","applyMiddleware","Search","term","setTerm","results","setResults","searchWiki","get","search","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,OAAhC;;;AACA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,YAAY;AAC7B,YAAMP,KAAK,CAACQ,GAAN,CAAU,6BAAV,CAAN;AACD,KAFD;;AAGAC,IAAAA,MAAM,GAJQ,CAMd;AACA;AACA;AACA;AACA;AACD,GAXQ,EAWN,CAACN,IAAD,CAXM,CAAT;AAYA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,KAAK,EAAEA,IADT;AAEE,UAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAF1B;AAGE,UAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA7BD;;GAAMV,M;;KAAAA,M;AA+BN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { applyMiddleware } from \"redux\";\r\nconst Search = () => {\r\n  const [term, setTerm] = useState(\"\");\r\n  const [results, setResults] = useState(\"\");\r\n  useEffect(() => {\r\n    const searchWiki = async () => {\r\n      await axios.get(\"en.wikipedia.org/w/api.php?\");\r\n    };\r\n    search();\r\n\r\n    // you cannot use axios async/await on the first arg in a useEffect fxn. so helper fxn are the work around.\r\n    // (async () => {\r\n    //      await axios.get(term);\r\n    //   })();\r\n    // this is the same as the helper fxn about the extra parens is essentially calls the fxn itself, so you dont have to define it and then call it.\r\n  }, [term]);\r\n  return (\r\n    <div>\r\n      <div className='ui form'>\r\n        <div className='field'>\r\n          <label>Enter Search Term</label>\r\n          <input\r\n            value={term}\r\n            onChange={(e) => setTerm(e.target.value)}\r\n            className='input'\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}